- name: VM Workflow – Backup → Replication → Shutdown
  hosts: all
  become: yes
  become_user: root
  become_method: sudo
  any_errors_fatal: true
  ignore_errors: yes
  
  vars:
    pbs_storage: "pbs-backup"
    backup_mode: "snapshot"
    vm_ids_to_replicate: [100, 200]
    job_suffix: "0"

  tasks:

    - name: 🔍 Get list of KVM VM IDs
      shell: qm list | awk 'NR>1 {print $1}'
      register: vm_list_raw

    - name: 🔍 Get list of LXC container IDs
      shell: pct list | awk 'NR>1 {print $1}'
      register: lxc_list_raw

    - name: 🔀 Combine VM and LXC IDs
      set_fact:
        all_ids: "{{ vm_list_raw.stdout_lines + lxc_list_raw.stdout_lines }}"

    - name: 💾 Backup each VM or LXC to PBS (no email notifications)
      shell: >
        vzdump {{ item }}
        --mode {{ backup_mode }}
        --storage {{ pbs_storage }}
        --compress zstd
        --mailto ""
      loop: "{{ all_ids }}"
      when: all_ids is defined

    - name: 🧪 Check if replication job exists
      shell: pvesr read {{ item }}-{{ job_suffix }}
      register: vm_check
      failed_when: false
      changed_when: false
      loop: "{{ vm_ids_to_replicate }}"
      loop_control:
        label: "{{ item }}"

    - name: 📋 Set list of VM/CT IDs with existing replication jobs
      set_fact:
        existing_vm_ids: "{{ vm_check.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | list }}"

    - name: 🔁 Run replication immediately for existing jobs
      shell: pvesr run --id {{ item }}-{{ job_suffix }} --verbose
      loop: "{{ existing_vm_ids }}"

    - name: 🔻 Power off the system
      command: /sbin/poweroff
      ignore_errors: yes
